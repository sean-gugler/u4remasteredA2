:CODE START
B600
:CODE END
C000
:DATA BYTES
B600-B601
B6FE-B700
B64D-B65E
B7EB-B7EE
B7E0-B7E2
BB47-BB48
B7E8-B7EA
B7EA-B7EB
B7F4-B800
B7E2-B7E4
BCA8-BCC8
BCD9-BCDC
BEFD-BF00
BF11-C000
B9F5-BA00
B88F-B956
:WORDS
B7F2-B7F4
:POINTERS
B7E4-B7E8-0
B7EE-B7F2-0
:HILOLOOKUP
:LOHILOOKUP
:DATA TEXT
:BLANK LINES
B800
B71A
B700
:REMOVED BYTES
:FULL COMMENTS
B607 WE'VE BEEN BOOTED. SET UP\nPARAMS FOR BOOT PROM SO\nTHAT WE'LL READ IN TRACK 0,\nBSECTRS 00-09.
B61F READ IN ANOTHER BSECTR FROM\nTRACK ZERO...
B64D TABLE OF PHYSICAL BSECTR NUMBERS\nWHICH CORRESPOND TO THE LOGICAL\nBSECTRS 0-F ON TRACK ZERO...
B65D APPEND BUG PATCHES
BA19 NOW ARE USING A DIFFERENT SLOT.
BA32 PREVIOUS SLOT'S DRIVE NOW OFF...
BA34 NOW CHECK IF THE MOTOR IS ON, THEN START IT
BA81 DRIVE SELECTED. IF MOTORING-UP,\nWAIT BEFORE SEEKING...
BA90 SEEK TO DESIRED TRACK...
BA97 SEE IF MOTOR WAS ALREADY SPINNING.
BA9A WAIT FOR MOTOR SPEED TO COME UP.
BAAB DISK IS NOW UP TO SPEED: READ IT!
BACE RRRRRECALIBRATE !!!!
BAED HAVE NOW READ AN ADDRESS FIELD CORRECTLY.
BAF4 NO, DRIVE WAS ON A DIFFERENT TRACK. TRY\nRESEEKING/RECALIBRATING FROM THIS TRACK
BB10 DRIVE IS ON RIGHT TRACK, CHECK VOLUME MISMATCH
BB32 HOORAY! WE GOT THE RIGHT SECTOR!
BB5A THIS IS THE 'SEEK' ROUTINE
BB95 THIS SUBROUTINE SETS THE SLOT DEPENDENT TRACK\nLOCATION.
B765 DOSINT - INITIALIZE DOS
B76B copy reset_handler to zero page $E0-$FF
B779 wipe memory $0803 - $C002 (probably intended $BFFF)
BCC8 DOS 3.3 REVISION B PATCH
BF29 6-BIT TO 7-BIT NIBL CONVERSION TABLE
B6B3 u4diff: unknown routine, looks like a DOS fixit patch
B88F entire NBUF1 was empty, copy-protect routines placed above
:SIDE COMMENTS
B601 WHERE DID BSECTR GET LOADED?
B603  (AT 0800)?
B605 =>NO. WE'RE LOADING SOMETHING
B607 GET BOOT BSLOT
B609 CONVERT TO CX00
B611 #BRETRY ;PROM ROUTINE OFFSET
B615 BUMP LOAD ADDRESS UP TO
B616  LAST PAGE SO WE
B619   CAN LOAD 'EM BACKWARDS...
B622 =>ALL DONE...EXECUTE IT!
B624 GET PHYSICAL BSECTR NUMBER
B627  AND SET FOR BOOT PROM READ
B629 ONE LESS BELL TO ANSWER..
B62C GET LOAD ADDRESS
B62F  FOR BSECTR READ
B631 MOVE LOAD ADDRESS DOWN A PAGE
B634 RESTORE BSLOT NUMBER
B636 READ MORE OF TRACK 0
B639 ENTRY AT SECOND PAGE
B63F CLEAR IN#X
B642  AND PR#X
B645 MONINIT THE SCREEN PARAMS
B648 PASS BSLOT NBR TO LOADER
B64A OFF TO LOOADER!
B65E FILE BUFFER FOUND?
B661 => NO, SO SKIP IT.
B663 YES, CLOSE IT
B669 RIGHT NOW
B66B ORIGINAL INSTRUCTION
B66E BACK TO ERROR HANDLER
B671 SHOULD WE?
B674 => NO
B676 BUMP CCB RECORD NUMBER
B67B TO GET TO NEXT SECTOR
B680 TURN FLAG OFF
B683 Go to FIXIT2 as exit
B686 ORIGINAL INSTRUCTION
B689 GO SAVE
B68C CLOSE THE FILE
B68F GO VERIFY IT AFTER SAVE
B692 PEEK INTO THE FCB: IF
B694 DCBCRS,DCBCSB ARE ZEROS,
B696  THEN WE HAVE EMPTY FILE
B69F  DCBCRR,DCBCRB
B6A1 INTO CCBRRN,CCBBYT
B6A9 NOW LET APPEND CONTINUE
B6AC SET FLAG SO APPEND WILL
B6AE KNOW TO CROSS SECTOR BOUNDARY
B6B1 ALWAYS TAKEN
B74F #IBCRTS ; SET READ
BA02 I/O CONTROL BLOCK (IOB)
BA00 UPON ENTRY, A&Y POINT AT THE
B7EA  IOB TYPE CODE
B7EB  VOLUME NUMBER
B7EC  TRACK NUMBER
B7ED  SECTOR NUMBER
B7F0  POINTER TO BUFFER
B7F2  DATA LENGTH
B7F4  COMMAND
BA09 SET RESEEK
B7F6  STATUS
BA06  COUNT
BA04 SET RECALIBRATE
B7FA  PREVIOUS DRIVE
B7FF FILL IN 3700 PAGE
BA0B  COUNT
BA0E GET SLOT # FOR THIS OPERATION
BA13 DID HE CHANGE SLOTS?
BA17 IF HE DIDN'T, GOOD FOR HIM!
BA19 SAVE NEW SLOT #
BA1B GET 'OLD SLOT NUMBER'
BA1F PUT BACK ON STACK
BA20 SAVE 'NEW SLOT NUMBER'
BA22 GO INTO READ MODE
BA25 TO BE SURE, DATA MUST REMAIN
BA27 STABLE FOR 96 MICROSECONDS
BA2A DATA STILL CHANGING?
BA2D IF SO, STILL SPINNING
BA30 STABLE LONG ENOUGH? IF NOT, LOOP
BA32 RESTORE NEW SLOT #
BA34 MAKE SURE IN READ MODE
BA3A WE MAY HAFTA CHECK SEVERAL TIMES TO BE SURE
BA3C GET THE DATA
BA3F DELAY FOR DISK DATA TO CHANGE
BA46 CHECK RUNNING HERE
BA49 =>IT'S ON...
BA4B MAYBE WE DIDN'T CATCH IT
BA4C  SO WE'LL TRY AGAIN
BA4E SAVE TEST RESULTS
BA4F TURN ON MOTOR REGARDLESS
BA52 MOVE OUT ALL POINTERS INTO ZPAGE
BA5A MOVED ALL POINTERS?
BA5E SET UP THE
BA60  MOTOR-ON TIME
BA64 NOW GET PARAMS
BA66 DETERMINE DRIVE ONE OR TWO
BA68 SAME DRIVE USED BEFORE?
BA6C IF SO, DON'T NECESSARILY WAIT FOR MOTOR
BA6E NOW USING THIS DRIVE
BA70 TELL HIM MOTOR WAS OFF
BA71 SET ZERO FLAG
BA74 BY GOING INTO THE CARRY
BA75 SELECT DRIVE 2 !
BA77 ASSUME DRIVE 1 TO HIT
BA7A IF WRONG, ENABLE DRIVE 2 INSTEAD
BA7F SAVE SELECTED DRIVE
BA81 WAS THE MOTOR
BA82  PREVIOUSLY OFF?
BA83 =>NO, FORGET WAITING.
BA85 YES, DELAY 150 MS
BA8D RESTORE SLOT NUMBER
BA90 SET TO IOBTRK
BA92 GET DESIRED TRACK
BA94 SEEK!
BA97 WAS MOTOR ON?
BA98 IF SO, DON'T DELAY, GET IT TODAY!
BA9A IF MOTORTIME IS POSITIVE,
BA9C  THEN SEEK WASTED ENUFF TIME FOR US
BA9E DELAY 100 USEC PER COUNT
BAA9 COUNT UP TO $0000
BAAD GET COMMAND CODE #
BAAF IF NULL COMMAND, GO HOME TO BED.
BAB1 FORMAT THE DISK?
BAB3 ALLRIGHT,ALLRIGHT, I WILL...
BAB5 SET CARRY=1 FOR READ, 0 FOR WRITE
BAB6 AND SAVE THAT
BAB7 MUST PRENIBBLIZE FOR WRITE.
BABC ONLY 48 RETRIES OF ANY KIND.
BAC1 GET SLOT NUM INTO X-REG
BAC4 READ NEXT ADDRESS FIELD
BAC7 IF READ IT RIGHT, HURRAH!
BAC9 ANOTHER MISTAEK!!
BACC  WELL, LET IT GO THIS TIME.,
BAD1 SAVE TRACK WE REALLY WANT
BAD2 RECALIBRATE ALL OVER AGAIN!
BAD4 PRETEND TO BE ON TRACK 96
BAD7 ONCE TOO MANY??
BADA TRIED TO RECALIBRATE TOO MANY TIMES, ERROR!
BADC #MAXSEEKS ;RESET THE
BADE  SEEK COUNTER
BAE3 MOVE TO TRACK 00
BAE7 GO TO CORRECT TRACK THIS TIME!
BAEA LOOP BACK, TRY AGAIN ON THIS TRACK
BAED ON THE RIGHT TRACK?
BAF2 IF SO, GOOD
BAF4 PRESERVE DESTINATION TRACK
BAFD SHOULD WE RESEEK?
BB00 =>YES, RESEEK
BB02 =>NO, RECALIBRATE!
BB04 REMOVE CURTRK.
BB05 #IBDERR ;BAD DRIVE ERROR
BB0D =>GO TO IT!
BB10 IS THE RIGHT DISK IN?
BB12 GET DESIRED VOLUM
BB14 PRESERVE DESIRED VOLUME#
BB15 GET ACTUAL VOLUME HERE ;was LDA VOLUME, neutered to not matter by 4am
BB17 TELL OPSYS WHAT VOLUME WAS THERE
BB1B GET DESIRED VOLUME BACK
BB1C DESIRED VOLUME 00 MATCHES ALL.
BB20 YUP, IT WAS RIGHT
BB22 #IBVMME ;HE SWITCHED DISCS!
BB24 ALWAYS TAKEN
BB26  TO ALLOW FOR INTERLEAVE
BB28 GET REQUESTED (LOGICAL) SECTOR
BB2A MOVE TO INDEX REG
BB2B COMPUTE PHYSICAL SECTOR
BB2E DID WE GET THE SECTOR?
BB30 NO, KEEP TRYING.
BB33 CARRY WAS SET FOR READ OPERATION,
BB35 CLEARED FOR WRITE
BB38 SAVE STATUS OF READ OPERATION
BB39 CARRY SET UPON RETURN IF BAD READ
BB3B CAREFUL OF STACK
BB3C SET TO POSTNIBLIZE
BB3E  ALL 256 BYTES OF THE SECTOR
BB40 DECODE INTO REAL WORLD DATA
BB43 RESTORE SLOTNUM INTO X
BB47 SKIP OVER NEXT BYTE WITH BIT OPCODE
BB48 INDICATE AN ERROR
BB49 GIVE HIM ERROR#
BB4D TURN IT OFF...
BB51 WRITE NYBBLES NOW
BB54 IF NO ERRORS.
BB56 #IBWPER ;DISK IS WRITE PROTECTED!!
BB58 ALWAYS TAKEN
BB5A AND PRESERVE A-REGISTER
BB5B ;IS THIS A TWO-PHASE DISC?
BB5F GET # OF PHASES INTO CARRY
BB61 IF ONE PHASE PER TRACK
BB67 DIVIDE BACK DOWN
BB6B SAVE DESTINATION TRACK(*2)
BB6D SET Y=SLOT#
BB75 IS MINUS, ON DRIVE ZERO
BB7A THIS IS WHERE I AM
BB7D AND WHERE I'M GOING TO
BB7F NOW UPDATE SLOT DEPENDENT
BB81 LOCATIONS WITH TRACK
BB83 INFORMATION
BB86 ALWAYS TAKEN
BB8B GO THERE!
BB95 PRESERVE DESTINATION TRACK
BB9A GET DRIVE # INTO CARRY
BB9B INTO (DRIVNO)
BB9D SET UP Y-REG
BBA1 ASSUME TRACK IS HELD *2
BBA4 IF ON DRIVE 1(1), DRIVNO MINUS
B707 was STA Decrypt_Rest,Y  (opcode $99) obfuscation defeated by 4am
B71A  SET BOOT SLOT
B71D  SET PREVIOUS SLOT
B730  SET PREV DRIVE
B738  COPY NO PAGES TO GET
B740  SET TRACK 0
B743 ENDING SECTOR OF DOS IMAGE
B745 TO IOB
B748 END PAGE OF DOS IMAGE
B74B IS ONE LESS THAN
B74C START OF DOSLDR+BOOT
B754  SET PREV TRACK = 0
B762  GO READ DOS
B800 obfuscate JSR leading here by restoring original code: LDY $BAIOB+1
B72C POWER UP CONSTANT=COMPLIMENT OF HI RESET VECTOR.
B79C  GET SECTOR
B79F  DECREMENT TO NEXT
B7A0 AT END OF TRACK?
B7A2 SET TO SECTOR 15
B7A9  SET NEXT SECTOR
B7AC  DECREMENT BUFFER POINTER
B7AF  DECREMENT PAGE COUNTER
B7B2  BR IF NOT DONE
B7B5 SAVE INTERUPT STATUS
B7B6 INHIBIT INTERUPT WHILE
B7B7  ACCESSING DISK
B7BA MUST PASS BACK CARRY FLAG & INTERUPT
B7BF CARRY SET MEANS ERROR
B7C2 SET UP FOR DOS LOADER
B7C5 START ADDRESS
B7CD INVERT VOLUME NUMBER
B7D6 CLEAR SECTOR
B7E0 CALC #PAGES IN DOS WITHOUT RWTS
B7E1 WRK CTR FOR BOOTIO
B768 u4diff: was DOSREL
BEFD AVOID PAGE BOUNDARY CROSSING...
B846 address mark 1
B851 address mark 2
B85C address mark 3
B862 skip Volume, Track
B873 1x1x1x1x : AA = 10101010 = 0000
B882 return last nibble of epilogue
B793 was JSR NBUF, de-protected by 4am
B83B jump back to original code
B821 make sure there's a real sector0 and also a fake one present
:USER LABELS
0027 SLOTZ_POINTA+1
B61F READNEXT
002B BSLOT
003F NSECT_BTEMP+1
003E BTEMP_AA
B6FE LOADADDR+1
B6FF BGRPCG
B639 GOLOADER
B64D TABLE
003D BSECTR
FE89 SETKBD
FE93 SETVID
FB2F MONINIT
B6F0 LOADADDR
B65D EOFFLAG
A762 FILSRC
B66B NOTFOUND
0040 ZPGWRK
B5BD CCBSTA
A6D0 ERROR
B671 BUMPER
B67E GOBACK
B5B5 CCBRRN
B5B6 CCBRRN+1
B5B4 CCBRQM
B686 VPATCH
A6A6 DOSGO
A2E8 ECLOSE
A27B EVAR
A544 FIXIT2
B692 EOFFIX
B694 CHKFILE
0042 ZPGFCB
B6AC FIXIT
B69F MOVE
B59C CCBRRN-$19
A6BC DOSGO2A
B6A9 BACK
B7E9 IBSLOT
B7EA IBDRVN
B7E8 IBTYPE
B7EB IBVOL
B7EC IBTRK
B7ED IBSECT
B7EE IBDCTP
B7F0 IBBUFP
B7F2 IBDLEN
B7FB DCT
B7F9 IBSPAR
B7F7 IBPSLT
B7F8 IBPDRV
B7F4 IBCMD
B793 BOOTIO
B765 DOSINT
0478 DRV1TRK
04F8 DRV2TRK_SEEKCNT
B7E0 NDPGS
B7E1 BRWCNT
B7E4 BAIOB
B600 TRK0LDR
B7F1 IBBUFP+1
B5F1 DCBVOL
B7C2 DLDSUP
B7BF DSKERR
BA00 RWTS
B7B5 DISKIO
B7A9 BIO1
B7E5 BAIOB+1
B400 iob_buffer
B7F5 IBSTAT
B7F6 IBSMOD
B7FF junk_B7
B7E6 ADOSLD
B7E7 ADOSLD+1
C08C Q6L
C08D Q6H
C08E Q7L
C088 MOTOROFF
C089 MOTORON
C08A DRV1EN
C08B DRV2EN
05F8 SLOT
06F8 RECALCNT
0578 RETRYCNT
0048 IOBPL
0049 IOBPH
BA34 SAMESLOT
BA25 STILLON
BA2A NOTSURE
BA3C CHKIFON
BA4E ITISON
0036 PTRSDEST-6
BA54 PTRMOV
0047 MONTIME+1
003C DEVCTBL
BA74 OK
BA7C SD1
BA7F DRVSEL
0035 DRIVNO
BA90 NOWAIT
BF00 MSWAIT_DNIBL
BA87 SEEKW
BB5A MYSEEK
BAAB TRYTRK
BAA0 CONWAIT
0046 MONTIME
BA9E MOTOF
BB0B GALLDONE
BB0D FORMDSK
BABC TRYTRK2
BD00 PRENIB16
BAC1 TRYADR
BE42 RDADR16
BAED RDRIGHT
BAC9 TRYADR2
BACE RECAL
BB95 SETTRK
BB04 DRVERR
BAE7 RESEEK
002E TRACK
BB10 RTTRK
BB07 JMPTO1
BB48 HNDLERR
BB46 ALLDONE
BBAF DSKFORM
BB26 CORRECTVOL
002F VOLUME
BCB8 INTRLEAV
002D SECT
BB51 WRIT
BDDC READ16
0026 T0_IDX_COUNT
BDC2 POSTNB16
BD2A WRITE16
BB6B MYSEEK2
002A TRKN
BB8E XTOY
BB7A WASD0
BB88 ISDRV1
BB8B GOSEEK
BEA0 SEEK
BBA2 SETTRK2
BBAB ONDRV1
BBAE SETRTS
B702 @next_byte
B704 @page_read
B709 page_write
B700 Decrypt_Rest
B71A DOSLODR
B6F1 @obfuscate_prologue2
9D82 DBINIT
03F2 ZRSET
03F3 ZRSET+1
03F4 PWCNST
B76B reset_intercept
B76D @next
B779 reset_handler
B699 reset_handler - $e0
0000 zero_page
0001 zero_page+1
0103 stack+3
B783 -
B781 @next_page
B78E @halt
00E0 reloc_reset_handler
B77A wipe_start
B794 BOOTIO+1
B795 BOOTIO+2
B7D6 CLRSEC
B7D9 CS1
B7E2 brw_pad
0041 NVOL
0044 TRK
B8FF NBUF2-1
B900 NBUF2
BBBF CLRNBUF2
B800 NBUF1
BBC5 CLRNBUF1
0045 NSYNC
BBD4 FORMTRK
BC0D WTRACK16
BBDC FORMERR1
BC04 FORMERR
BBE5 FINDS0
BC09 FORMDONE
BC17 WSECT0
BC15 WSECT
B956 WADR16
BC87 WEXIT2
BC29 VTRACK
BC32 CLRFOUND
BCA8 FOUND
BC3A S0DELAY
BC71 S15LOC
BC67 VDATA
BC60 VERR
BC62 VSECT
BC6C VERR1
BC88 SECTOK
BC81 NOTS15
BCA6 WEXIT1
BCC8 RCPATCH
B744 RCBACK
BCDC CLRBYTE
AA5B TEMP1A
AA68 CB
AA69 CB+1
BCE6 CLRSTS1
A759 CLRSTS
AAAF RSTATE
BCED ERROR9X
AE76 RTNFCB
B393 ENTSTK
A314 CLALL
B37D ERRORA
BD04 PRENIB1
BD1E PRENIB2
0678 SLOTABS
BDB4 WEXIT
C08F Q7H
BD4A WSYNC
BDB9 WNIBL7
BDB8 WNIBL9
BD69 WDATA1
BD66 WDATA0
BF29 NIBL
BD7E WDATA2
BDBB WNIBL
BDC4 POST1
BDC6 POST2
BDDE RSYNC
BE40 RDERR
BDE1 READ1
BDE6 RSYNC1
BDEA READ2
BDF5 READ3
BE00 RDATA1
BE03 READ4
BE12 RDATA2
BE14 READ5
BE24 READ6
BE2E READ7
BE37 READ8
BE9E RDEXIT
BE46 RDASYN
BE4D RDA1
BE52 RDASN1
BE58 RDA2
BE63 RDA3
BE70 RDAFLD
BE72 RDA4
BE7A RDA5
002C CSSTV
BE8C RDA6
BEFC SEEKRTS
BEAD SEEK2
BEEA SEEKEND
BEC0 OUT
BEC5 MINTST
BECB MAXTST
BED0 STEP2
BEEE SETPHASE
BF11 ONTABLE
BEF1 CLRPHASE
BF1D OFFTABLE
C080 PHASEOFF
BF02 MSW1
BF0B NSW2
BF96 DNIBL_maybe
BF69 pad_to_XX96
B9BD WADRTS
B969 WSYNC1
B9C3 WADRTS1
B9D5 WNIBLB2
B9C4 WBYTE
B9D4 WNIBLA
B9F5 pad_to_page
AAAB ESTATE
C010 STROBE
C000 KEYBOARD
B9DF waitkey
B841 uRDASYN
B84C uRDA2
B857 uRDA3
B846 uRDASN1
B864 uRDA4
B86E uRDA5
B879 uRDA6
B884 uRDA7
B83E find_sector_0
B83B @found
B824 @find_different
0031 data_prologue_2
004E data_prologue_3
B0AE LOCNXB
B1AD DTBLN
B5C4 CFCBSB+1
B5C3 CFCBSB
B5BB CCBDAT
B5BC CCBDAT+1
B5DE DCBCSB
B5BA CCBFUC
B367 ERROR5
B5DC DCBCRS
B6BD @cont
B6C0 +
B6E4 +
B6B3 u4locate
BD5D write_data_epilogue3
004F sector0_attempts
:DISABLED HILO LABELS
B73E
B800
:USER HILO
:TAB SIZE
0008
:LOAD OFFSET
B600
:SYSTEM
Apple II
